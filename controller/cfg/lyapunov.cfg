#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import *
#from local_planner_limits import add_generic_localplanner_params
PACKAGE = "controller"
gen = ParameterGenerator()

# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
#add_generic_localplanner_params(gen)

# For integers and doubles:
#       Name                    Type      Reconfiguration level
#       Description
#       Default  Min  Max


cntrl_trajectory = gen.add_group("ControlLaw", type="tab")

# Control Law Tuning

cntrl_trajectory.add("k1Gain", double_t, 0, "Contributes to s_dot",    0.0, -2.0,   2.0)
cntrl_trajectory.add("k2Gain", double_t, 0, "Contributes to third term in control law as ",   -1.4, -20.0,   20.0)  #-0.3
cntrl_trajectory.add("kDeltaGain", double_t, 0, "Shaping function constant",    -1.0, -10.0,   10.0)#-1.0
cntrl_trajectory.add("gamma", double_t, 0, "Contributes to second term in control law",    1.0, -10.0,   10.0) #0.8
cntrl_trajectory.add("thetaA", double_t, 0, "Contributes to first term in control law",    0.0, -10.0,   10.0) #0.78
cntrl_trajectory.add("lookAhead", double_t, 0, "Fixed look ahead in path at with {SF} frame is set",    0.15, 0,   2.0)
cntrl_trajectory.add("inplaceRadius", double_t, 0, "Distance considered in path segment distance for inplace rotation .Note : inplaceRadius should be less than xyGoalTolerance__m",0.15, 0,   2.0)
cntrl_trajectory.add("Kp", double_t, 0, "P params for the rotation controller",0.9, 0.0,2.0)
cntrl_trajectory.add("Kd", double_t, 0, "D params for the rotation controller",0.01, 0.0,1.0)

# Robot 
grp_robot = gen.add_group("Robot", type="tab")

grp_robot.add("maxLinearVel__m_s", double_t, 0, "Maximum translational velocity of the robot in m/s",    1.0, 0,   2.0)
grp_robot.add("minLinearVel__m_s", double_t, 0, "Minimum translational velocity of the robot in m/s",    0.0, 0,   2.0)
grp_robot.add("maxAngularVel__rad_s", double_t, 0, "Maximum angular velocity of the robot in rad/s", 0.8, 0,   2.0)
grp_robot.add("maxInplaceAngularVel__rad_s", double_t, 0, "Maximum inplace angular velocity of the robot in rad/s", 0.4, 0,   2.0)
grp_robot.add("linearAccLimit__m_s2", double_t, 0, "Maximum acceleration limit of robot in m/s2", 0.2, 0.0,100)
grp_robot.add("linearDeccLimit__m_s2", double_t, 0, "Maximum decceleration limit of robot in m/s2", 0.5, 0.0,100)
grp_robot.add("angularAccLimit__rad_s2", double_t, 0, "Maximum angular acceleration limit of robot in m/s2", 0.6, 0.0,100)
grp_robot.add("lateralAcceleration__m_s2", double_t, 0, "Lateral acceleration of the robot in m/s2", 0.2, 0.0,10)

# Velocity Profiling
grp_robot.add("useVelocityProfiling",   bool_t,   0,"Enable, if an external velocity profile is to be used",True) 

#Backward Motion
grp_robot.add("useBackwardMotion",bool_t, 0, "Enable if a backward motion is desired",True)


# GoalTolerance
grp_goal = gen.add_group("GoalTolerance", type="tab")

grp_goal.add("xyGoalTolerance__m", double_t, 0, "Allowed x-y tolerance at goal in meters :Note : inplaceRadius should be less than xyGoalTolerance__m",    0.2, 0,   1.0)
grp_goal.add("yawTolerance__rad", double_t, 0, "Allowed angular tolerance at goal in rad",    0.1, 0,   1.0)
grp_goal.add("inplaceTolerance__rad", double_t, 0, "Allowed angular tolerance at normal motion in rad",    0.6, 0,   1.0)


#  Defaults
def_optimization = gen.add_group("Restore", type="tab")    
def_optimization.add("restore_defaults", bool_t, 0, "Restore to the original configuration", False)


#  Defaults
controllaw_tuning = gen.add_group("Control Law Tuning", type="tab")    

controllaw_tuning.add("enableFirst", bool_t, 0, "Enable/Disable first term of control law", False)
controllaw_tuning.add("enableSecond", bool_t, 0, "Enable/Disable second term of control law", True)
controllaw_tuning.add("enableThird", bool_t, 0, "Enable/Disable third term of control law", True)
controllaw_tuning.add("enableFourth", bool_t, 0, "Enable/Disable fourth term of control law", True)



exit(gen.generate(PACKAGE, "controller", "lyapunov"))

